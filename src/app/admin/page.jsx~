// 'use client';
//
// import { useSession, signOut } from 'next-auth/react';
// import { useEffect, useState } from 'react';
// import { useRouter } from 'next/navigation';
//
// export default function AdminPage() {
//     const { data: session, status } = useSession();
//     const router = useRouter();
//     const [clients, setClients] = useState([]);
//
//     useEffect(() => {
//         if (status === 'loading') return;
//
//         if (!session) {
//             router.push('/login');
//         } else if (session.user.role !== 'admin') {
//             router.push('/client');
//         }
//     }, [status, session, router]);
//
//     useEffect(() => {
//         const fetchClients = async () => {
//             try {
//                 const res = await fetch('/api/admin/clients');
//                 if (!res.ok) throw new Error('Failed to fetch clients');
//                 const data = await res.json();
//                 setClients(data.clients);
//             } catch (err) {
//                 console.error(err);
//             }
//         };
//
//         if (session?.user.role === 'admin') {
//             fetchClients();
//         }
//     }, [session]);
//
//     if (status === 'loading') {
//         return <p className="p-10">Loading session...</p>;
//     }
//
//     if (!session || session.user.role !== 'admin') {
//         return null;
//     }
//
//     return (
//         <div className="p-10">
//             <h1 className="text-3xl font-bold mb-4">Welcome, Admin!</h1>
//             <p className="mb-6">Email: {session.user.email}</p>
//
//             <button
//                 onClick={() => signOut({ callbackUrl: '/login' })}
//                 className="mb-8 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
//             >
//                 Logout
//             </button>
//
//             <h2 className="text-2xl font-semibold mb-2">Clients and their Debtors:</h2>
//
//             {clients.map((client) => (
//                 <div key={client.id} className="mb-6 p-4 border border-gray-200 rounded shadow">
//                     <h3 className="text-xl font-bold">{client.name || client.email}</h3>
//                     <p className="text-sm text-gray-600 mb-2">Email: {client.email}</p>
//
//                     <h4 className="font-semibold">Debtors:</h4>
//                     {client.debtorRecords.length > 0 ? (
//                         <ul className="list-disc pl-5">
//                             {client.debtorRecords.map((debtor) => (
//                                 <li key={debtor.id}>
//                                     {debtor.name} - ${debtor.amountOwed.toFixed(2)}
//                                 </li>
//                             ))}
//                         </ul>
//                     ) : (
//                         <p className="text-gray-500">No debtors.</p>
//                     )}
//                 </div>
//             ))}
//         </div>
//     );
// }
//


'use client';

import { useEffect, useState } from 'react';
import {signOut} from "next-auth/react";
// import SendRemindersButton from "@/app/components/SendReminders";





export default function AdminPage() {
    const [clients, setClients] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    const fetchClients = async () => {
        try {
            const res = await fetch('/api/admin/clients');
            const data = await res.json();

            if (!res.ok) {
                throw new Error(data.message || 'Error fetching clients');
            }

            // Adjust depending on whether `data` has a `clients` key or not
            const clientData = Array.isArray(data) ? data : data.clients;
            setClients(clientData);
        } catch (err) {
            console.error('Error fetching clients:', err);
            setError('Failed to load clients.');
        } finally {
            setLoading(false);
        }
    };

    const toggleDebtorAvailability = async (debtorId) => {
        try {
            const res = await fetch(`/api/admin/debtors/${debtorId}/toggle-availability`, {
                method: 'PATCH',
            });
            if (!res.ok) throw new Error('Failed to toggle');
            await fetchClients(); // refresh data
        } catch (err) {
            console.error(err);
            alert('Failed to toggle availability');
        }
    };

    useEffect(() => {
        fetchClients();
    }, []);

    if (loading) return <p>Loading...</p>;
    if (error) return <p className="text-red-500">{error}</p>;

    return (
        <main className="p-6 max-w-4xl mx-auto">
            <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>

            {clients.length === 0 ? (
                <p>No clients found.</p>
            ) : (
                clients.map(client => (
                    <div
                        key={client.id}
                        className="mb-10 p-4 border border-gray-300 rounded shadow-sm"
                    >
                        <h2 className="text-xl font-semibold mb-2">
                            {client.name} ({client.email})
                        </h2>

                        {client.debtorRecords.length === 0 ? (
                            <p className="text-gray-500">No debtors.</p>
                        ) : (
                            <ul className="space-y-3">
                                {client.debtorRecords.map(debtor => (
                                    <li
                                        key={debtor.id}
                                        className="flex items-center justify-between border p-3 rounded"
                                    >
                                        <div>
                                            <p><strong>Name:</strong> {debtor.name}</p>
                                            <p><strong>Amount Owed:</strong> ${debtor.amountOwed}</p>
                                        </div>
                                        <label className="flex items-center space-x-2">
                                            <input
                                                type="checkbox"
                                                checked={debtor.availableForNotify}
                                                onChange={() => toggleDebtorAvailability(debtor.id)}
                                            />
                                            <span>Notify Allowed</span>
                                        </label>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>
                ))
            )}

            {/* ========== Send Reminders Button ========== */}
            <SendRemindersButton />

            <button
                onClick={() => signOut({ callbackUrl: '/login' })}
                className="mt-10 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
            >
                Logout
            </button>
        </main>
    );

}
