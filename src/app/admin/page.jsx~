


// 'use client';
//
// import { useEffect, useState } from 'react';
// import { signOut, useSession } from 'next-auth/react';
// import { useRouter } from 'next/navigation';
//
// // ========== Send Reminders Button ==========
// function SendRemindersButton() {
//     const [sending, setSending] = useState(false);
//     const [message, setMessage] = useState(null);
//
//     const handleSendReminders = async () => {
//         setSending(true);
//         setMessage(null);
//
//         try {
//             const res = await fetch('/api/send-reminders', {
//                 method: 'GET',
//             });
//
//             if (!res.ok) {
//                 const errorData = await res.json();
//                 throw new Error(errorData.message || 'Something went wrong.');
//             }
//
//             setMessage({ type: 'success', text: 'Reminders sent successfully!' });
//         } catch (err) {
//             setMessage({ type: 'error', text: err.message });
//         } finally {
//             setSending(false);
//         }
//     };
//
//     return (
//         <div className="mt-6">
//             <button
//                 onClick={handleSendReminders}
//                 disabled={sending}
//                 className={`bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 ${
//                     sending ? 'opacity-50 cursor-not-allowed' : ''
//                 }`}
//             >
//                 {sending ? 'Sending Reminders...' : 'Send Reminders'}
//             </button>
//
//             {message && (
//                 <p
//                     className={`mt-2 ${
//                         message.type === 'success' ? 'text-green-600' : 'text-red-600'
//                     }`}
//                 >
//                     {message.text}
//                 </p>
//             )}
//         </div>
//     );
// }
//
// // ========== Admin Page ==========
// export default function AdminPage() {
//     const [clients, setClients] = useState([]);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState('');
//     const { data: session, status } = useSession();
//     const router = useRouter();
//
//     // Cron form state
//     const [hour, setHour] = useState('');
//     const [minute, setMinute] = useState('');
//     const [statusMessage, setStatusMessage] = useState('');
//
//     // Auth & client data fetching
//     useEffect(() => {
//         if (status === 'loading') return;
//
//         if (!session) {
//             router.push('/login');
//         } else if (session.user.role !== 'admin') {
//             router.push('/client');
//         }
//     }, [status, session, router]);
//
//     const fetchClients = async () => {
//         try {
//             const res = await fetch('/api/admin/clients');
//             const data = await res.json();
//             const clientData = Array.isArray(data) ? data : data.clients;
//             setClients(clientData);
//         } catch (err) {
//             console.error('Error fetching clients:', err);
//             setError('Failed to load clients.');
//         } finally {
//             setLoading(false);
//         }
//     };
//
//     useEffect(() => {
//         fetchClients();
//         fetchReminderTime();
//     }, []);
//
//     const toggleDebtorAvailability = async (debtorId) => {
//         try {
//             const res = await fetch(`/api/admin/debtors/${debtorId}/toggle-availability`, {
//                 method: 'PATCH',
//             });
//             if (!res.ok) throw new Error('Failed to toggle');
//             await fetchClients(); // refresh data
//         } catch (err) {
//             console.error(err);
//             alert('Failed to toggle availability');
//         }
//     };
//
//     const fetchReminderTime = async () => {
//         try {
//             const res = await fetch('/api/get-reminder-time');
//             const data = await res.json();
//             setHour(data.hour || '');
//             setMinute(data.minute || '');
//         } catch (err) {
//             console.error('Failed to fetch reminder time');
//         }
//     };
//
//     const handleCronTimeSubmit = async (e) => {
//         e.preventDefault();
//         try {
//             const res = await fetch('/api/set-reminder-time', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify({ hour, minute }),
//             });
//             const data = await res.json();
//             if (res.ok) {
//                 setStatusMessage('✅ Reminder time updated!');
//             } else {
//                 setStatusMessage(`❌ Error: ${data.message}`);
//             }
//         } catch (err) {
//             console.error(err);
//             setStatusMessage('❌ Failed to update reminder time');
//         }
//     };
//
//     if (loading) return <p>Loading...</p>;
//     if (error) return <p className="text-red-500">{error}</p>;
//
//     return (
//         <main className="p-6 max-w-4xl mx-auto">
//             <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>
//
//             {clients.length === 0 ? (
//                 <p>No clients found.</p>
//             ) : (
//                 clients.map(client => (
//                     <div
//                         key={client.id}
//                         className="mb-10 p-4 border border-gray-300 rounded shadow-sm"
//                     >
//                         <h2 className="text-xl font-semibold mb-2">
//                             {client.name} ({client.email})
//                         </h2>
//
//                         {client.debtorRecords.length === 0 ? (
//                             <p className="text-gray-500">No debtors.</p>
//                         ) : (
//                             <ul className="space-y-3">
//                                 {client.debtorRecords.map(debtor => (
//                                     <li
//                                         key={debtor.id}
//                                         className="flex items-center justify-between border p-3 rounded"
//                                     >
//                                         <div>
//                                             <p><strong>Name:</strong> {debtor.name}</p>
//                                             <p><strong>Amount Owed:</strong> ${debtor.amountOwed}</p>
//                                         </div>
//                                         <label className="flex items-center space-x-2">
//                                             <input
//                                                 type="checkbox"
//                                                 checked={debtor.availableForNotify}
//                                                 onChange={() => toggleDebtorAvailability(debtor.id)}
//                                             />
//                                             <span>Notify Allowed</span>
//                                         </label>
//                                     </li>
//                                 ))}
//                             </ul>
//                         )}
//                     </div>
//                 ))
//             )}
//
//             {/* ========== Send Reminders Button ========== */}
//             <SendRemindersButton />
//
//             {/* ========== Set Reminder Time Form ========== */}
//             <div className="mt-10 border-t pt-6">
//                 <h2 className="text-xl font-semibold mb-4">Automated Reminder Time</h2>
//                 <form onSubmit={handleCronTimeSubmit} className="space-y-4 max-w-sm">
//                     <div>
//                         <label className="block mb-1 font-medium">Hour (0–23)</label>
//                         <input
//                             type="number"
//                             value={hour}
//                             onChange={(e) => setHour(e.target.value)}
//                             min="0"
//                             max="23"
//                             required
//                             className="border rounded px-3 py-2 w-full"
//                         />
//                     </div>
//                     <div>
//                         <label className="block mb-1 font-medium">Minute (0–59)</label>
//                         <input
//                             type="number"
//                             value={minute}
//                             onChange={(e) => setMinute(e.target.value)}
//                             min="0"
//                             max="59"
//                             required
//                             className="border rounded px-3 py-2 w-full"
//                         />
//                     </div>
//                     <button
//                         type="submit"
//                         className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
//                     >
//                         Save Reminder Time
//                     </button>
//                     {statusMessage && (
//                         <p className="mt-2 text-sm">{statusMessage}</p>
//                     )}
//                 </form>
//             </div>
//
//             <button
//                 onClick={() => signOut({ callbackUrl: '/login' })}
//                 className="mt-10 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
//             >
//                 Logout
//             </button>
//         </main>
//     );
// }


Codeshare logo
ShareSign UpLog In
207
{/* ========== Send Reminders Button ========== */}
208
<SendRemindersButton />
209
​
210
{/* ========== Set Reminder Time Form ========== */}
211
<div className="mt-10 border-t pt-6">
    212
    <h2 className="text-xl font-semibold mb-4">Automated Reminder Time</h2>
213
<form onSubmit={handleCronTimeSubmit} className="space-y-4 max-w-sm">
    214
    <div>
    215
    <label className="block mb-1 font-medium">Hour (0–23)</label>
216
<input
217
type="number"
218
value={hour}
219
onChange={(e) => setHour(e.target.value)}
220
min="0"
221
max="23"
222
required
223
className="border rounded px-3 py-2 w-full"
224
/>
225
</div>
226
<div>
227
<label className="block mb-1 font-medium">Minute (0–59)</label>
228
<input
229
type="number"
230
value={minute}
231
onChange={(e) => setMinute(e.target.value)}
232
min="0"
233
max="59"
234
required
235
className="border rounded px-3 py-2 w-full"
236
/>
237
</div>
238
<button
239
type="submit"
240
className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
241
>
242
Save Reminder Time
243
</button>
244
{statusMessage && (
    245
    <p className="mt-2 text-sm">{statusMessage}</p>
    246
)}
247
</form>
248
</div>
249
​
250
<button
251
onClick={() => signOut({ callbackUrl: '/login' })}
252
className="mt-10 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
253
>
254
Logout
255
</button>
256
</main>
257
);
258
}
259



Please don't block our ads :( － Ad sponsors allow us to make Codeshare free.
Hide Ads
